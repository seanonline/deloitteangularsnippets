{
  "Angular Service CRUD Setup": {
    "prefix": "deloitte-angular-service-CRUD-setup",
    "description": "Angular 8 Template for CRUD operations.",
    "body": [
      "",
      "import { Injectable } from '@angular/core';", 
      "import { HttpClient, HttpHeaders } from '@angular/common/http';",
      "import { Observable, of } from 'rxjs';",
      "import { catchError, map, tap, switchMap, debounceTime, distinctUntilChanged } from 'rxjs/operators';",
      "",
    "const httpOptions = {",
    "  headers: new HttpHeaders({ 'Content-Type': 'application/json' })",
    "};",
    "",
    "@Injectable({",
    "  providedIn: 'root'",
    "})",
    "export class YourServiceName {",
    "","",
       "constructor(private http: HttpClient) { }", "",
      "//  written for Deloitte Consulting LLC and Compatible with Angular 7/8 and rxjs: 6.3.3 ",
      "",
      "",
      "${1:apiName}: string = 'http://www.server.com/api/';",
      "",
      "controllername : string = '${2:ControllerName}';",
      "",
      "CreateURL : string         =  this.${1} + this.controllername +  '/CreateActionName';",
      "DeleteURL : string         =  this.${1} + this.controllername +  '/DeleteActionName';",
      "UpdateURL : string         =  this.${1} + this.controllername +  '/UpdateActionName';",
      "GetAllRecordsURL : string  =  this.${1} + this.controllername +  '/getAllRecordsActionName';",
      "GetRecordsByIdURL : string =  this.${1} + this.controllername +  '/getRecordsActionName';",
      "",
      "",
      " //-------------- Get All ${3}s ------------",
      "",
      "",
      "public getAll${3:Action}s(): Observable<any> {",
      "return this.http.get<any>(this.GetAllRecordsURL).pipe(",
      "catchError((error: any) => {",
      "console.error(error);",
      "return of();",
      "}),",
      ");",
      "}",
      "",
      "",
      "  //-------------- Create A ${3} ------------",
      "",
      "",
      "public add${3}(recordData): Observable<any> {",
      "return this.http.post(this.CreateURL,recordData).pipe(",
      "catchError((error: any) => {",
      "console.error(error);",
      "return of();",
      "}),",
      ");",
      "}",
      "",
      "",
      " //-------------- Get ${3} by ID ------------",
      "",
      "",
      "public get${3}ById(recordid: any): Observable<any> {",
      "return this.http.get<any>(`${this.GetRecordsByIdURL}/${recordId}`).pipe(",
      "catchError((error: any) => {",
      "console.error(error);",
      "return of();",
      "}),",
      ");",
      "}",
      "",
      "",
      "//-------------- Update a ${3} ------------",
      "",
      "",
      "public update${3}(recordUpdate): Observable<any> {",
      "return this.http.put(this.UpdateURL, recordUpdate, httpOptions).pipe(",
      "catchError((error: any) => {",
      "console.error(error);",
      "return of();",
      "}),",
      ");",
      "}",
      "",
      " //--------------Delete A  ${3} ------------",
      "",
      "public delete${3}(recordid: any):  Observable<any> {",
      "return this.http.delete(this.DeleteURL+'/recordid').pipe(",
      "catchError((error: any) => {",
      "console.error(error);",
      "return of();",
      "}),",
      ");",
      "}",
      "",
      "",
      "}",""
    ]
  },
  "Angular Service Subscribe": {
    "prefix": "deloitte-angular-service-Subscribe",
    "description": "Angular 8 Template for Subscribing to Service.",
    "body": [
      "// written for : Deloitte Consulting LLC",
      "",
      "uncomment below model ",
      "//  model:any",
      "",
      "getAll${3:Action}s() {",
      "",
      "this.service.getRecords()",
      ".subscribe(res =>  {",
      "this.data = res;",
      "console.log(this.data);",
      "}, err => {",
      "console.log(err);",
      " // this.isLoadingResults = false;",
      "});",
      "}",
      "",
      "",
      "get${3}Byid(id) {",
      "this.service.getRecordById(id)",
      ".subscribe(data => {",
      "this.model = data;",
      "console.log(this.product);",
      " // this.isLoadingResults = false;",
      "});",
      "}",
      "",
      "",
      "delete${3}(id) {",
      "this.service.deleteRecord(id)",
      ".subscribe(res => {",
      " // this.router.navigate(['/listRecords']);",
      "}, (err) => {",
      "console.log(err);",
      " // this.isLoadingResults = false;",
      "}",
      ");",
      "}",
      "",
      "create${3}() {",
      "this.service.addRecord(this.model)",
      ".subscribe(",
      "data => {",
      "// this.alertService.success('created record successful', true);",
      "// this.router.navigate(['/login']);",
      "},",
      "error => { ",
      "//  this.alertService.error(error); ",
      "//  this.loading = false; ",
      "});",
      "}",
      "update${3}() {",
      "this.Service.updateRecord(this.model)",
      ".subscribe(",
      "data => {",
      "// this.alertService.success('updated successful', true);",
      "// this.router.navigate(['/listReords']);",
      "},",
      "error => { ",
      "//  this.alertService.error(error); ",
      "//  this.loading = false; ",
      "});",
      "}"
    ]
  }
}